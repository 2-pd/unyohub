#!/usr/bin/env python3
# coding: utf-8

import importlib
import sys
import os
import subprocess


UNYOHUB_COMMANDS_APP_NAME = "鉄道運用Hub コマンドラインツール"
UNYOHUB_COMMANDS_VERSION = "25.03-2"

UNYOHUB_DATA_DIR = "../data"


def mes (log_text, is_error=False, is_heading=False):
    if is_error:
        print("\x1b[31m\x1b[1m【エラー】\x1b[22m" + str(log_text) + "\x1b[0m")
    elif is_heading:
        print("\n\x1b[94m_/_/_/_/\x1b[0m " + str(log_text) + " \x1b[94m_/_/_/_/\x1b[0m\n")
    else:
        print(str(log_text))


def print_usage ():
    print("\n\x1b[94m_/_/_/_/\x1b[0m 使用可能なコマンド \x1b[94m_/_/_/_/\x1b[0m\n")
    
    print("\x1b[93msetup-libs\x1b[0m \x1b[90m<作成する管理者ユーザーのID>\x1b[0m")
    print("  ライブラリの初期設定を行う\n")
    
    print("\x1b[93mconv-formations\x1b[0m \x1b[90m<路線系統識別名>\x1b[0m")
    print("  編成表データを変換する\n")
    
    print("\x1b[93mclean-formation-db\x1b[0m \x1b[90m<路線系統識別名>\x1b[0m")
    print("  データベースから編成表にない編成・車両のデータを削除する\n")
    
    print("\x1b[93mupdate-operations\x1b[0m \x1b[90m<路線系統識別名> <ダイヤ改正識別名> <ダイヤ識別名>\x1b[0m")
    print("  運用表をデータベースに書き込む\n")
    
    print("\x1b[93mcreate-role\x1b[0m \x1b[90m<ロール識別名> <ロール表示名>\x1b[0m")
    print("  ロールを新規作成する\n")
    
    print("\x1b[93mdelete-role\x1b[0m \x1b[90m<ロール識別名>\x1b[0m")
    print("  ロールを削除する\n")
    
    print("\x1b[93madd-permission\x1b[0m \x1b[90m<ロール識別名> <権限対象識別名> <動作識別名>\x1b[0m")
    print("  ロールに権限を割り当てる\n")
    
    print("\x1b[93mremove-permission\x1b[0m \x1b[90m<ロール識別名> <権限対象識別名> <動作識別名>\x1b[0m")
    print("  ロールから権限を剥奪する\n")
    
    print("\x1b[93massign-role\x1b[0m \x1b[90m<ユーザー識別名> <ロール識別名>\x1b[0m")
    print("  ユーザーにロールを割り当てる\n")
    
    print("\x1b[93mremove-role\x1b[0m \x1b[90m<ユーザー識別名> <ロール識別名>\x1b[0m")
    print("  ユーザーからロールを剥奪する\n")
    
    print("\x1b[93minit-db\x1b[0m \x1b[90m<路線系統識別名>\x1b[0m")
    print("  各路線系統用データベースファイルを生成する\n")
    
    print("\x1b[93minit-moderation-db\x1b[0m")
    print("  モデレーションログ格納データベースファイルを生成する\n")


print(UNYOHUB_COMMANDS_APP_NAME + " \x1b[90mv" + UNYOHUB_COMMANDS_VERSION + "\x1b[0m")

os.chdir(os.path.dirname(os.path.abspath(__file__)))
data_dir = (os.path.abspath(UNYOHUB_DATA_DIR))

args = sys.argv

if len(args) >= 2:
    match args[1]:
        case "setup-libs":
            if len(args) == 3:
                subprocess.run(["php", "modules/libs_setup.php", args[2]])
            elif len(args) == 2:
                subprocess.run(["php", "modules/libs_setup.php"])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "conv-formations":
            if len(args) == 3:
                convert_formation_table = importlib.import_module("modules.convert_formation_table")
                convert_formation_table.convert_formation_table(mes, data_dir + "/" + os.path.basename(args[2]))
                
                print("\n生成された編成表データに問題がなければ \x1b[93munyohub clean-formation-db\x1b[0m \x1b[90m<路線系統識別名>\x1b[0m を実行することで不要なデータを削除できます")
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "clean-formation-db":
            if len(args) == 3:
                clean_formation_db_table = importlib.import_module("modules.clean_formation_db_table")
                clean_formation_db_table.clean_formation_db_table(mes, data_dir + "/" + os.path.basename(args[2]))
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "update-operations":
            if len(args) == 5:
                write_operations_to_db = importlib.import_module("modules.write_operations_to_db")
                write_operations_to_db.write_operations_to_db(mes, data_dir + "/" + os.path.basename(args[2]), os.path.basename(args[3]), os.path.basename(args[4]))
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "create-role":
            if len(args) == 4:
                subprocess.run(["php", "modules/create_role.php", args[2], args[3]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "delete-role":
            if len(args) == 3:
                subprocess.run(["php", "modules/delete_role.php", args[2]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "add-permission":
            if len(args) == 5 or len(args) == 4:
                subprocess.run(["php", "modules/add_permission.php", *args[2:]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "remove-permission":
            if len(args) == 5 or len(args) == 4:
                subprocess.run(["php", "modules/remove_permission.php", *args[2:]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "assign-role":
            if len(args) == 4:
                subprocess.run(["php", "modules/assign_role.php", args[2], args[3]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "remove-role":
            if len(args) == 4:
                subprocess.run(["php", "modules/remove_role.php", args[2], args[3]])
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "init-db":
            if len(args) == 3:
                initialize_db = importlib.import_module("modules.initialize_db")
                initialize_db.initialize_db(mes, data_dir + "/" + os.path.basename(args[2]))
            else:
                print("\x1b[31m引数の数が異常です\x1b[0m")
        case "init-moderation-db":
            initialize_moderation_db = importlib.import_module("modules.initialize_moderation_db")
            initialize_moderation_db.initialize_moderation_db(mes, os.path.dirname(data_dir) + "/config/moderation.db")
        case _:
            print("\x1b[31mコマンド \x1b[1m" + args[1] + "\x1b[22m は存在しません\x1b[0m")
            print_usage()
else:
    print_usage()
